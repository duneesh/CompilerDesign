#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_RULES 100
#define MAX_SYMBOLS 50

typedef struct {
    char symbols[MAX_SYMBOLS];
    int isTerminal;
} Rule;

typedef struct {
    char symbol;
    int firstSet[MAX_SYMBOLS];
} FirstSet;

int numRules;
Rule rules[MAX_RULES];
int numSymbols;
FirstSet firstSets[MAX_SYMBOLS];

int isTerminal(char symbol) {
    for (int i = 0; i < numRules; i++) {
        if (rules[i].symbols[0] == symbol) {
            return rules[i].isTerminal;
        }
    }
    return 0; 
}

void computeFirstSet(char symbol) {
    if (firstSets[symbol].firstSet[symbol] == 1) {
        return;
    }

    firstSets[symbol].firstSet[symbol] = 1;

    if (isTerminal(symbol)) {
        firstSets[symbol].firstSet[symbol] = 1;
        return;
    }

    for (int i = 0; i < numRules; i++) {
        if (rules[i].symbols[0] == symbol) {
            int j = 0;
            while (j < strlen(rules[i].symbols) && !isTerminal(rules[i].symbols[j])) {
                computeFirstSet(rules[i].symbols[j]);
                for (int k = 0; k < MAX_SYMBOLS; k++) {
                    if (firstSets[rules[i].symbols[j]].firstSet[k] == 1) {
                        firstSets[symbol].firstSet[k] = 1;
                    }
                }
                if (firstSets[rules[i].symbols[j]].firstSet['ε'] == 1) {
                    j++;
                } else {
                    break;
                }
            }
            if (j == strlen(rules[i].symbols)) {
                firstSets[symbol].firstSet['ε'] = 1;
            }
        }
    }
}

int main() {
   
    for (int i = 0; i < numSymbols; i++) {
        computeFirstSet(rules[i].symbols[0]);
    }

    for (int i = 0; i < numSymbols; i++) {
        printf("FIRST(%c) = {", rules[i].symbols[0]);
        int printed = 0;
        for (int j = 0; j < MAX_SYMBOLS; j++) {
            if (firstSets[rules[i].symbols[0]].firstSet[j] == 1) {
                if (printed) {
                    printf(", ");
                }
                printf("%c", j);
                printed = 1;
            }
        }
        printf("}\n");
    }

    return 0;
}
