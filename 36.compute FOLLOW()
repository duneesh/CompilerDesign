#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_RULES 100
#define MAX_SYMBOLS 50

typedef struct {
    char symbols[MAX_SYMBOLS];
    int isTerminal;
} Rule;

typedef struct {
    char symbol;
    int firstSet[MAX_SYMBOLS];
    int followSet[MAX_SYMBOLS];
    int isTerminal;
} Symbol;

int numRules;
Rule rules[MAX_RULES];
int numSymbols;
Symbol symbols[MAX_SYMBOLS];

int isTerminal(char symbol) {
    for (int i = 0; i < numSymbols; i++) {
        if (symbols[i].symbol == symbol) {
            return symbols[i].isTerminal;
        }
    }
    return 0; 
}

void computeFirstSet(char symbol) {
    if (symbols[symbol].firstSet[symbol] == 1) {
        return; 
    }

    symbols[symbol].firstSet[symbol] = 1;

    if (isTerminal(symbol)) {
        symbols[symbol].firstSet[symbol] = 1;
        return;
    }

    for (int i = 0; i < numRules; i++) {
        if (rules[i].symbols[0] == symbol) {
            int j = 0;
            while (j < strlen(rules[i].symbols) && !isTerminal(rules[i].symbols[j])) {
                computeFirstSet(rules[i].symbols[j]);
                for (int k = 0; k < MAX_SYMBOLS; k++) {
                    if (symbols[rules[i].symbols[j]].firstSet[k] == 1) {
                        symbols[symbol].firstSet[k] = 1;
                    }
                }
                if (symbols[rules[i].symbols[j]].firstSet['e'] == 1) {
                    j++;
                } else {
                    break;
                }
            }
            if (j == strlen(rules[i].symbols)) {
                symbols[symbol].firstSet['e'] = 1;
            }
        }
    }
}

void computeFollowSet(char symbol) {
    if (symbols[symbol].followSet[symbol] == 1) {
        return;
    }

    symbols[symbol].followSet[symbol] = 1;

    if (symbol == rules[0].symbols[0]) {
        symbols[symbol].followSet['$'] = 1;
    }

    for (int i = 0; i < numRules; i++) {
        for (int j = 0; j < strlen(rules[i].symbols); j++) {
            if (rules[i].symbols[j] == symbol && j < strlen(rules[i].symbols) - 1) {
                int k = j + 1;
                while (k < strlen(rules[i].symbols) && !isTerminal(rules[i].symbols[k])) {
                    computeFirstSet(rules[i].symbols[k]);
                    for (int l = 0; l < MAX_SYMBOLS; l++) {
                        if (symbols[rules[i].symbols[k]].firstSet[l] == 1 && l != 'e') {
                            symbols[symbol].followSet[l] = 1;
                        }
                    }
                    if (symbols[rules[i].symbols[k]].firstSet['e'] == 1) {
                        k++;
                    } else {
                        break;
                    }
                }
                if (k == strlen(rules[i].symbols)) {
                    computeFollowSet(rules[i].symbols[0]);
                    for (int l = 0; l < MAX_SYMBOLS; l++) {
                        if (symbols[rules[i].symbols[0]].followSet[l] == 1) {
                            symbols[symbol].followSet[l] = 1;
                        }
                    }
                }
            }
        }
    }
}

int main() {
    
    for (int i = 0; i < numSymbols; i++) {
        computeFirstSet(symbols[i].symbol);
    }

    for (int i = 0; i < numSymbols; i++) {
        computeFollowSet(symbols[i].symbol);
    }

    for (int i = 0; i < numSymbols; i++) {
        printf("FOLLOW(%c) = {", symbols[i].symbol);
        int printed = 0;
        for (int j = 0; j < MAX_SYMBOLS; j++) {
            if (symbols[i].followSet[j] == 1) {
                if (printed) {
                    printf(", ");
                }
                printf("%c", j);
                printed = 1;
            }
        }
        printf("}\n");
    }

    return 0;
}
